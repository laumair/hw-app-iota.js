{"version":3,"file":"iota.modern.js","sources":["../src/guards.js","../src/iota.js","../src/error.js"],"sourcesContent":["import Joi from 'joi';\n\nconst validInteger = Joi.number().integer();\nconst validSecurity = validInteger.min(1).max(3); // low, medium or high\nconst validIndex = validInteger.min(0).max(4294967295); // 32 bit unsigned int\nconst validValue = validInteger.min(0).max(2779530283277761);\nconst validBalance = validInteger.min(1).max(2779530283277761);\n\nconst validTrytes = Joi.string().regex(/^[A-Z9]+$/); // tryte string in the default base-27 encoding\nconst validTag = validTrytes.allow('').max(27);\nconst validAddress = Joi.alternatives().try(\n  validTrytes.length(81), // without checksum\n  validTrytes.length(90) // with checksum\n);\n\nconst validTransfers = Joi.array()\n  .items(\n    Joi.object({\n      address: validAddress.required(),\n      tag: validTag.required(),\n      value: validValue.required(),\n    }).unknown()\n  )\n  .min(1);\nconst validInputs = Joi.array()\n  .items(\n    Joi.object({\n      address: validAddress.required(),\n      balance: validBalance.required(),\n      keyIndex: validIndex.required(),\n      tags: Joi.array().items(validTag).optional(),\n    }).unknown()\n  )\n  .min(1);\nconst validRemainder = Joi.object({\n  address: validAddress.required(),\n  keyIndex: validIndex.required(),\n  tag: validTag.optional(),\n}).unknown();\n\nexport function string(value) {\n  Joi.assert(value, Joi.string().required());\n}\n\nexport function security(value) {\n  Joi.assert(value, validSecurity.required());\n}\n\nexport function index(value) {\n  Joi.assert(value, validIndex.required());\n}\n\nexport function transfers(value) {\n  Joi.assert(value, validTransfers.required());\n}\n\nexport function inputs(value) {\n  Joi.assert(value, validInputs.required());\n}\n\nexport function remainder(value) {\n  Joi.assert(value, validRemainder.optional());\n}\n\nexport function trytes(value) {\n  Joi.assert(value, validTrytes.required());\n}\n\nexport function nullaryFunc(value) {\n  Joi.assert(value, Joi.func().arity(0).required());\n}\n","import Struct from 'struct';\nimport Bundle from 'iota.lib.js/lib/crypto/bundle/bundle.js';\nimport {\n  addChecksum,\n  noChecksum,\n  transactionTrytes,\n} from 'iota.lib.js/lib/utils/utils.js';\nimport bippath from 'bip32-path';\nimport semver from 'semver';\nimport { getErrorMessage } from './error';\nimport * as guards from './guards';\n\n/**\n * IOTA API\n * @module hw-app-iota\n */\n\nconst CLA = 0x7a;\nconst Commands = {\n  // specific timeouts:\n  INS_SET_SEED: 0x01, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_PUBKEY: 0x02, // TIMEOUT_CMD_PUBKEY\n  INS_TX: 0x03, // TIMEOUT_CMD_NON_USER_INTERACTION => TIMEOUT_CMD_USER_INTERACTION (IF cur_idx == lst_idx)\n  INS_SIGN: 0x04, // TIMEOUT_CMD_PUBKEY\n  INS_GET_APP_CONFIG: 0x10, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_RESET: 0xff, // TIMEOUT_CMD_NON_USER_INTERACTION\n};\nconst TIMEOUT_CMD_PUBKEY = 10000;\nconst TIMEOUT_CMD_NON_USER_INTERACTION = 10000;\nconst TIMEOUT_CMD_USER_INTERACTION = 150000;\n\nconst LEGACY_VERSION_RANGE = '<0.5';\nconst DEFAULT_SECURITY = 2;\nconst HASH_LENGTH = 81;\nconst TAG_LENGTH = 27;\nconst SIGNATURE_FRAGMENT_SLICE_LENGTH = 3 * HASH_LENGTH;\nconst EMPTY_TAG = '9'.repeat(TAG_LENGTH);\n\n/**\n * Class for the interaction with the Ledger IOTA application.\n *\n * @example\n * import Iota from \"hw-app-iota\";\n * const iota = new Iota(transport);\n */\nclass Iota {\n  constructor(transport) {\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        'setActiveSeed',\n        'getAddress',\n        'prepareTransfers',\n        'signBundle',\n        'getAppVersion',\n        'getAppMaxBundleSize',\n        'signBundle'\n      ],\n      'IOT'\n    );\n\n    this.transport = transport;\n    this.config = undefined;\n    this.security = 0;\n    this.pathArray = undefined;\n  }\n\n  /**\n   * Prepares the IOTA seed to be used for subsequent calls.\n   *\n   * @param {String} path - String representation of the BIP32 path. At most 5 levels.\n   * @param {Integer} [security=2] - IOTA security level to use\n   * @example\n   * iota.setActiveSeed(\"44'/4218'/0'/0'\", 2);\n   **/\n  async setActiveSeed(path, security = DEFAULT_SECURITY) {\n    guards.string(path);\n    guards.security(security);\n\n    this.pathArray = Iota._validatePath(path);\n    this.security = security;\n\n    // query the app config, if not present\n    this.config = this.config ? this.config : await this._getAppConfig();\n\n    if (semver.satisfies(this.config.app_version, LEGACY_VERSION_RANGE)) {\n      // use legacy structs\n      this._createPubkeyInput = this._createPubkeyInputLegacy;\n      this._createTxInput = this._createTxInputLegacy;\n\n      await this._setSeed();\n    } else {\n      // reset the state on the Ledger\n      await this._reset(true);\n    }\n  }\n\n  /**\n   * Generates an address index-based.\n   * The result depends on the initalized seed and security level.\n   *\n   * @param {Integer} index - Index of the address\n   * @param {Object} [options]\n   * @param {Boolean} [options.checksum=false] - Append 9 tryte checksum\n   * @param {Boolean} [options.display=false] - Display generated address on display\n   * @returns {Promise<String>} Tryte-encoded address\n   * @example\n   * iota.getAddress(0, { checksum: true });\n   **/\n  async getAddress(index, options = {}) {\n    this._assertInitialized();\n    guards.index(index);\n\n    const checksum = options.checksum || false;\n    const display = options.display || false;\n\n    const address = await this._publicKey(index, display);\n    if (checksum) {\n      return addChecksum(address);\n    }\n    return address;\n  }\n\n  /**\n   * Prepares the array of raw transaction data (trytes) by generating a bundle and signing the inputs.\n   *\n   * @param {Object[]} transfers - Transfer objects\n   * @param {String} transfers[].address - Tryte-encoded address of recipient, with or without the 9 tryte checksum\n   * @param {Integer} transfers[].value - Value to be transferred\n   * @param {String} transfers[].tag - Tryte-encoded tag. Maximum value is 27 trytes.\n   * @param {Object[]} inputs - Inputs used for funding the transfer\n   * @param {String} inputs[].address - Tryte-encoded source address, with or without the 9 tryte checksum\n   * @param {Integer} inputs[].balance - Balance of that input\n   * @param {String} inputs[].keyIndex - Index of the address\n   * @param {String[]} [inputs[].tags] - Tryte-encoded tags, one for each security level.\n   * @param {Object} [remainder] - Destination for sending the remainder value (of the inputs) to.\n   * @param {String} remainder.address - Tryte-encoded address, with or without the 9 tryte checksum\n   * @param {Integer} remainder.keyIndex - Index of the address\n   * @param {String} [remainder.tag] - Tryte-encoded tag. Maximum value is 27 trytes.\n   * @param {Function} [now = Date.now()] - Function to get the milliseconds since the UNIX epoch for timestamps.\n   * @returns {Promise<String[]>} Transaction trytes of 2673 trytes per transaction\n   */\n  async prepareTransfers(transfers, inputs, remainder, now = () => Date.now()) {\n    this._assertInitialized();\n    guards.transfers(transfers);\n    guards.inputs(inputs);\n    guards.remainder(remainder);\n    guards.nullaryFunc(now);\n\n    if (transfers.length != 1) {\n      throw new Error('unsupported number of transfers');\n    }\n\n    remainder = Iota._validateRemainder(transfers, inputs, remainder);\n    const trytes = await this._prepareTransfers(\n      transfers,\n      inputs,\n      remainder,\n      now\n    );\n    // reset the bundle\n    await this._reset(true);\n\n    return trytes;\n  }\n\n  /**\n   * Prepares the array of raw transaction data (trytes) by signing the inputs of the provided bundle.\n   * \n   * @param {Bundle} bundle - Bundle to be signed\n   * @param {Object.<string, int>} addressKeyIndices - Indices of each input address\n   * @returns {Promise<String[]>} Transaction trytes of 2673 trytes per transaction\n   */\n  async signBundle(bundle, addressKeyIndices) {\n    this._assertInitialized();\n    // assure that the bundle is really finalized\n    bundle.finalize()\n\n    const inputs = bundle.bundle.filter(tx => tx.value < 0)\n    inputs.forEach((tx) => {\n      if (!(tx.address in addressKeyIndices)) {\n        throw new Error('\"addressKeyIndices\" invalid: missing ' + tx.address)\n      }\n    })\n\n    try {\n      await this._signBundle(bundle, addressKeyIndices);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error)\n    }\n\n    // compute and return the corresponding trytes\n    const bundleTrytes = [];\n    bundle.bundle.forEach((tx) => bundleTrytes.push(transactionTrytes(tx)));\n    \n    // reset the bundle\n    await this._reset(true);\n    \n    return bundleTrytes.reverse();\n  }\n\n  /**\n   * Retrieves version information about the installed application from the device.\n   *\n   * @returns {Promise<String>} Semantic Version string (i.e. MAJOR.MINOR.PATCH)\n   **/\n  async getAppVersion() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    return config.app_version;\n  }\n\n  /**\n   * Retrieves the largest supported number of transactions (including meta transactions)\n   * in one transfer bundle from the device.\n   *\n   * @returns {Promise<Integer>} Maximum bundle size\n   **/\n  async getAppMaxBundleSize() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    // return value from config or default 8\n    return config.app_max_bundle_size ? config.app_max_bundle_size : 8;\n  }\n\n  ///////// Private methods should not be called directly! /////////\n\n  static _validatePath(path) {\n    let pathArray;\n    try {\n      pathArray = bippath.fromString(path).toPathArray();\n    } catch (e) {\n      throw new Error('\"path\" invalid: ' + e.message);\n    }\n\n    if (!pathArray || pathArray.length < 2 || pathArray.length > 5) {\n      throw new Error('\"path\" invalid: ' + 'Invalid path length');\n    }\n\n    return pathArray;\n  }\n\n  _assertInitialized() {\n    if (!this.security) {\n      throw new Error('seed not yet initialized');\n    }\n  }\n\n  _addSeedFields(struct) {\n    return struct\n      .word8('security')\n      .word32Ule('pathLength')\n      .array('pathArray', this.pathArray.length, 'word32Ule');\n  }\n\n  _initSeedFields(struct) {\n    const fields = struct.fields;\n    fields.security = this.security;\n    fields.pathLength = this.pathArray.length;\n    fields.pathArray = this.pathArray;\n  }\n\n  async _setSeed() {\n    const setSeedInStruct = new Struct();\n    this._addSeedFields(setSeedInStruct);\n\n    setSeedInStruct.allocate();\n    this._initSeedFields(setSeedInStruct);\n\n    await this._sendCommand(\n      Commands.INS_SET_SEED,\n      0,\n      0,\n      setSeedInStruct.buffer(),\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  _createPubkeyInputLegacy(index) {\n    let struct = new Struct();\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  _createPubkeyInput(index) {\n    let struct = new Struct();\n    this._addSeedFields(struct);\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    this._initSeedFields(struct);\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  async _publicKey(index, display) {\n    const pubkeyInStruct = this._createPubkeyInput(index);\n\n    const response = await this._sendCommand(\n      Commands.INS_PUBKEY,\n      display ? 0x01 : 0x00,\n      0,\n      pubkeyInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const pubkeyOutStruct = new Struct().chars('address', HASH_LENGTH);\n    pubkeyOutStruct.setBuffer(response);\n\n    return pubkeyOutStruct.fields.address;\n  }\n\n  static _validateRemainder(transfers, inputs, remainder) {\n    const balance = inputs.reduce((a, i) => a + i.balance, 0);\n    const payment = transfers.reduce((a, t) => a + t.value, 0);\n\n    if (balance < payment) {\n      throw new Error('insufficient balance');\n    } else if (balance > payment) {\n      if (!remainder) {\n        throw new Error('\"remainder\" is required');\n      }\n      return {\n        address: remainder.address,\n        value: balance - payment,\n        keyIndex: remainder.keyIndex,\n      };\n    }\n\n    // ignore the remainder, if there is no change\n    return undefined;\n  }\n\n  async _sign(index, sliceLength) {\n    const signInStruct = new Struct().word32Ule('index');\n\n    signInStruct.allocate();\n    signInStruct.fields.index = index;\n\n    const response = await this._sendCommand(\n      Commands.INS_SIGN,\n      0,\n      0,\n      signInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const signOutStruct = new Struct()\n      .chars('signature', sliceLength)\n      .word8Sle('fragmentsRemaining');\n    signOutStruct.setBuffer(response);\n\n    return {\n      signature: signOutStruct.fields.signature,\n      fragmentsRemaining: signOutStruct.fields.fragmentsRemaining,\n    };\n  }\n\n  _createTxInputLegacy(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  _createTxInput(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    if (tx_idx == 0) {\n      this._addSeedFields(struct);\n    }\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    if (tx_idx == 0) {\n      this._initSeedFields(struct);\n    }\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  async _transaction(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    const txInStruct = this._createTxInput(\n      address,\n      address_idx,\n      value,\n      tag,\n      tx_idx,\n      tx_len,\n      time\n    );\n\n    let timeout = TIMEOUT_CMD_NON_USER_INTERACTION;\n    if (tx_idx == tx_len) {\n      timeout = TIMEOUT_CMD_USER_INTERACTION;\n    }\n\n    const response = await this._sendCommand(\n      Commands.INS_TX,\n      tx_idx == 0 ? 0x00 : 0x80,\n      0,\n      txInStruct.buffer(),\n      timeout\n    );\n\n    const txOutStruct = new Struct()\n      .word8('finalized')\n      .chars('bundleHash', HASH_LENGTH);\n    txOutStruct.setBuffer(response);\n\n    return {\n      finalized: txOutStruct.fields.finalized,\n      bundleHash: txOutStruct.fields.bundleHash,\n    };\n  }\n\n  async _getSignatureFragments(index, sliceLength) {\n    const numSlices = (this.security * 2187) / sliceLength;\n\n    let signature = '';\n    for (let i = 1; i <= numSlices; i++) {\n      const result = await this._sign(index, sliceLength);\n      signature += result.signature;\n\n      // the remaining fragments must match the num slices\n      if ((i === numSlices) != (result.fragmentsRemaining === 0)) {\n        throw new Error('wrong signture length');\n      }\n    }\n\n    // split into segments of exactly 2187 chars\n    return signature.match(/.{2187}/g);\n  }\n\n  async _addSignatureFragmentsToBundle(bundle) {\n    for (let i = 0; i < bundle.bundle.length; i++) {\n      const tx = bundle.bundle[i];\n\n      // only sign inputs\n      if (tx.value >= 0) {\n        continue;\n      }\n\n      // compute all the signature fragments for that input transaction\n      const signatureFragments = await this._getSignatureFragments(\n        i,\n        SIGNATURE_FRAGMENT_SLICE_LENGTH\n      );\n      // and set the first fragment\n      tx.signatureMessageFragment = signatureFragments.shift();\n\n      // set the signature fragments for all successive meta transactions\n      const address = tx.address;\n      for (let j = 1; j < this.security; j++) {\n        if (++i >= bundle.bundle.length) {\n          return;\n        }\n\n        const tx = bundle.bundle[i];\n        if (tx.address === address && tx.value === 0) {\n          tx.signatureMessageFragment = signatureFragments.shift();\n        }\n      }\n    }\n  }\n\n  async _signBundle(bundle, addressKeyIndices) {\n    let finalized = false;\n    let bundleHash = '';\n    for (const tx of bundle.bundle) {\n      const keyIndex = addressKeyIndices[tx.address]\n        ? addressKeyIndices[tx.address]\n        : 0;\n      const result = await this._transaction(\n        tx.address,\n        keyIndex,\n        tx.value,\n        tx.obsoleteTag,\n        tx.currentIndex,\n        tx.lastIndex,\n        tx.timestamp\n      );\n      finalized = result.finalized;\n      bundleHash = result.bundleHash;\n    }\n\n    if (!finalized) {\n      throw new Error('bundle not finalized');\n    }\n    if (bundleHash !== bundle.bundle[0].bundle) {\n      throw new Error('wrong bundle hash');\n    }\n\n    await this._addSignatureFragmentsToBundle(bundle);\n  }\n\n  _hasDuplicateAddresses(transfers, inputs, remainder) {\n    const set = new Set();\n    transfers.forEach((t) => set.add(t.address));\n    inputs.forEach((i) => set.add(i.address));\n    if (remainder && set.has(remainder.address)) {\n      return true;\n    }\n\n    return set.length === transfers.length + inputs.length;\n  }\n\n  async _prepareTransfers(transfers, inputs, remainder, now) {\n    transfers = transfers.map((t) => ({\n      ...t,\n      // remove checksum\n      address: noChecksum(t.address),\n      // pad tag\n      tag: t.tag ? t.tag.padEnd(TAG_LENGTH, '9') : EMPTY_TAG,\n    }));\n    inputs = inputs.map((i) => ({\n      ...i,\n      // remove checksum\n      address: noChecksum(i.address),\n      // pad tags\n      tags: i.tags ? i.tags.map((tag) => tag.padEnd(TAG_LENGTH, '9')) : null,\n    }));\n    if (remainder) {\n      // remove checksum\n      remainder = {\n        ...remainder,\n        // remove checksum\n        address: noChecksum(remainder.address),\n        // pad tag\n        tag: remainder.tag ? remainder.tag.padEnd(TAG_LENGTH, '9') : EMPTY_TAG,\n      };\n    }\n\n    if (this._hasDuplicateAddresses(transfers, inputs, remainder)) {\n      throw new Error('transaction must not contain duplicate addresses');\n    }\n\n    // use the current time\n    const timestamp = Math.floor(now() / 1000);\n    let bundle = new Bundle();\n\n    transfers.forEach((x) =>\n      bundle.addEntry(1, x.address, x.value, x.tag, timestamp, -1)\n    );\n    inputs.forEach((x) => {\n      for (let i = 0; i < this.security; i++) {\n        bundle.addEntry(\n          1,\n          x.address,\n          i == 0 ? -x.balance : 0,\n          x.tags ? x.tags[i] : EMPTY_TAG,\n          timestamp,\n          x.keyIndex\n        );\n      }\n    });\n    if (remainder) {\n      bundle.addEntry(\n        1,\n        remainder.address,\n        remainder.value,\n        remainder.tag,\n        timestamp,\n        remainder.keyIndex\n      );\n    }\n    bundle.addTrytes([]);\n    bundle.finalize();\n\n    // map internal addresses to their index\n    const addressKeyIndices = {};\n    inputs.forEach((i) => (addressKeyIndices[i.address] = i.keyIndex));\n    if (remainder) {\n      addressKeyIndices[remainder.address] = remainder.keyIndex;\n    }\n\n    // sign the bundle on the ledger\n    await this._signBundle(bundle, addressKeyIndices);\n\n    // compute and return the corresponding trytes\n    const bundleTrytes = [];\n    bundle.bundle.forEach((tx) => bundleTrytes.push(transactionTrytes(tx)));\n    return bundleTrytes.reverse();\n  }\n\n  _createAppConfigOutputLegacy() {\n    const struct = new Struct()\n      .word8('app_flags')\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch');\n\n    return struct;\n  }\n\n  _createAppConfigOutput() {\n    const struct = new Struct()\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch')\n      .word8('app_max_bundle_size')\n      .word8('app_flags');\n\n    return struct;\n  }\n\n  async _getAppConfig() {\n    const response = await this._sendCommand(\n      Commands.INS_GET_APP_CONFIG,\n      0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n\n    let getAppConfigOutStruct = this._createAppConfigOutput();\n    // check whether the response matches the struct plus 2 bytes status code\n    if (response.length < getAppConfigOutStruct.length() + 2) {\n      getAppConfigOutStruct = this._createAppConfigOutputLegacy();\n    }\n    getAppConfigOutStruct.setBuffer(response);\n\n    const fields = getAppConfigOutStruct.fields;\n    return {\n      app_max_bundle_size: fields.app_max_bundle_size,\n      app_flags: fields.app_flags,\n      app_version:\n        fields.app_version_major +\n        '.' +\n        fields.app_version_minor +\n        '.' +\n        fields.app_version_patch,\n    };\n  }\n\n  async _reset(partial = false) {\n    await this._sendCommand(\n      Commands.INS_RESET,\n      partial ? 1 : 0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  async _sendCommand(ins, p1, p2, data, timeout) {\n    const transport = this.transport;\n    try {\n      transport.setExchangeTimeout(timeout);\n      return await transport.send(CLA, ins, p1, p2, data);\n    } catch (error) {\n      // update the message, if status code is present\n      if (error.statusCode) {\n        error.message = getErrorMessage(error.statusCode) || error.message;\n      }\n      throw error;\n    }\n  }\n}\n\nexport default Iota;\n","function getStatusMessage(statusCode) {\n  switch (statusCode) {\n    // improve text of most common errors\n    case 0x9000: // SW_OK\n      return 'Success';\n    case 0x6700: // SW_INCORRECT_LENGTH\n      return 'Incorrect input length';\n    case 0x6a80: // SW_COMMAND_INVALID_DATA\n      return 'Incorrect data';\n    case 0x6b00: // SW_INCORRECT_P1P2\n      return 'Incorrect command parameter';\n    case 0x6c00: // SW_INCORRECT_LENGTH_P3\n      return 'Incorrect length specified in header';\n    case 0x6d00: // SW_INS_NOT_SUPPORTED\n      return 'Invalid INS command';\n    case 0x6e00: // SW_CLA_NOT_SUPPORTED\n      return 'Incorrect CLA (Wrong application opened)';\n    case 0x6900: // SW_COMMAND_NOT_ALLOWED\n      return 'Command not allowed (Command out of order)';\n    case 0x6982: // SW_SECURITY_STATUS_NOT_SATISFIED\n      return 'Security not satisfied (Device locked)';\n    case 0x6985: // SW_CONDITIONS_OF_USE_NOT_SATISFIED\n      return 'Condition of use not satisfied (Denied by the user)';\n    case 0x6401: // SW_COMMAND_TIMEOUT\n      return 'Security not satisfied (Timeout exceeded)';\n    case 0x69a1: // SW_BUNDLE_ERROR + INSECURE HASH\n      return 'Bundle error (Insecure hash)';\n    case 0x69a2: // SW_BUNDLE_ERROR + NON-ZERO BALANCE\n      return 'Bundle error (Non zero balance)';\n    case 0x69a3: // SW_BUNDLE_ERROR + INVALID META TX\n      return 'Bundle error (Invalid meta transaction)';\n    case 0x69a4: // SW_BUNDLE_ERROR + INVALID ADDRESS INDEX\n      return 'Bundle error (Invalid input address/index pair(s))';\n    case 0x69a5: // SW_BUNDLE_ERROR + ADDRESS REUSED\n      return 'Bundle error (Address reused)';\n\n    // Legacy exceptions\n    case 0x6984: // SW_COMMAND_INVALID_DATA\n      return 'Invalid input data';\n    case 0x6986: // SW_APP_NOT_INITIALIZED\n      return 'App has not been initialized by user';\n    case 0x6991: // SW_TX_INVALID_INDEX\n      return 'Invalid transaction index';\n    case 0x6992: // SW_TX_INVALID_ORDER\n      return 'Invalid transaction order (Output, Inputs, Change)';\n    case 0x6993: // SW_TX_INVALID_META\n      return 'Invalid meta transaction';\n    case 0x6994: // SW_TX_INVALID_OUTPUT\n      return 'Invalid output transaction (Output must come first)';\n  }\n\n  // unexpected exception thrown\n  if (0x6f00 <= statusCode && statusCode <= 0x6fff) {\n    return 'Internal error, please report';\n  }\n}\n\n/**\n * Provides meaningful responses to error status codes returned by IOTA Ledger app.\n * @param {Integer} statusCode - Error statusCodecode\n * @returns {String} String message corresponding to error code\n */\nexport function getErrorMessage(statusCode) {\n  const smsg = getStatusMessage(statusCode);\n  if (smsg) {\n    const statusCodeStr = statusCode.toString(16);\n\n    // set the message according to the status code\n    return `Ledger device: ${smsg} (0x${statusCodeStr})`;\n  }\n}\n"],"names":["validInteger","Joi","number","integer","validSecurity","min","max","validIndex","validValue","validBalance","validTrytes","string","regex","validTag","allow","validAddress","alternatives","try","length","validTransfers","array","items","object","address","required","tag","value","unknown","validInputs","balance","keyIndex","tags","optional","validRemainder","EMPTY_TAG","repeat","Iota","constructor","transport","decorateAppAPIMethods","this","config","undefined","security","pathArray","[object Object]","path","assert","_validatePath","_getAppConfig","semver","satisfies","app_version","_createPubkeyInput","_createPubkeyInputLegacy","_createTxInput","_createTxInputLegacy","_setSeed","_reset","index","options","_assertInitialized","checksum","display","_publicKey","addChecksum","transfers","inputs","remainder","now","Date","func","arity","Error","_validateRemainder","trytes","_prepareTransfers","bundle","addressKeyIndices","finalize","filter","tx","forEach","_signBundle","error","console","bundleTrytes","push","transactionTrytes","reverse","app_max_bundle_size","bippath","fromString","toPathArray","e","message","_addSeedFields","struct","word8","word32Ule","_initSeedFields","fields","pathLength","setSeedInStruct","Struct","allocate","_sendCommand","buffer","pubkeyInStruct","response","pubkeyOutStruct","chars","setBuffer","reduce","a","i","payment","t","sliceLength","signInStruct","signOutStruct","word8Sle","signature","fragmentsRemaining","address_idx","tx_idx","tx_len","time","word64Sle","txInStruct","timeout","txOutStruct","finalized","bundleHash","numSlices","result","_sign","match","signatureFragments","_getSignatureFragments","signatureMessageFragment","shift","j","_transaction","obsoleteTag","currentIndex","lastIndex","timestamp","_addSignatureFragmentsToBundle","_hasDuplicateAddresses","set","Set","add","has","map","noChecksum","padEnd","Math","floor","Bundle","x","addEntry","addTrytes","_createAppConfigOutputLegacy","_createAppConfigOutput","getAppConfigOutStruct","app_flags","app_version_major","app_version_minor","app_version_patch","partial","ins","p1","p2","data","setExchangeTimeout","send","statusCode","smsg","getStatusMessage","toString","getErrorMessage"],"mappings":"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"}