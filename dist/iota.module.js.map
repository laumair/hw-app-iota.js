{"version":3,"file":"iota.module.js","sources":["../src/guards.js","../src/iota.js","../src/error.js"],"sourcesContent":["import Joi from 'joi';\n\nconst validInteger = Joi.number().integer();\nconst validSecurity = validInteger.min(1).max(3); // low, medium or high\nconst validIndex = validInteger.min(0).max(4294967295); // 32 bit unsigned int\nconst validValue = validInteger.min(0).max(2779530283277761);\nconst validBalance = validInteger.min(1).max(2779530283277761);\n\nconst validTrytes = Joi.string().regex(/^[A-Z9]+$/); // tryte string in the default base-27 encoding\nconst validTag = validTrytes.allow('').max(27);\nconst validAddress = Joi.alternatives().try(\n  validTrytes.length(81), // without checksum\n  validTrytes.length(90) // with checksum\n);\n\nconst validTransfers = Joi.array()\n  .items(\n    Joi.object({\n      address: validAddress.required(),\n      tag: validTag.required(),\n      value: validValue.required(),\n    }).unknown()\n  )\n  .min(1);\nconst validInputs = Joi.array()\n  .items(\n    Joi.object({\n      address: validAddress.required(),\n      balance: validBalance.required(),\n      keyIndex: validIndex.required(),\n    }).unknown()\n  )\n  .min(1);\nconst validRemainder = Joi.object({\n  address: validAddress.required(),\n  keyIndex: validIndex.required(),\n}).unknown();\n\nexport function string(value) {\n  Joi.assert(value, Joi.string().required());\n}\n\nexport function security(value) {\n  Joi.assert(value, validSecurity.required());\n}\n\nexport function index(value) {\n  Joi.assert(value, validIndex.required());\n}\n\nexport function transfers(value) {\n  Joi.assert(value, validTransfers.required());\n}\n\nexport function inputs(value) {\n  Joi.assert(value, validInputs.required());\n}\n\nexport function remainder(value) {\n  Joi.assert(value, validRemainder.optional());\n}\n\nexport function nullaryFunc(value) {\n  Joi.assert(value, Joi.func().arity(0).required());\n}\n","import Struct from 'struct';\nimport Bundle from 'iota.lib.js/lib/crypto/bundle/bundle.js';\nimport {\n  addChecksum,\n  noChecksum,\n  transactionTrytes,\n} from 'iota.lib.js/lib/utils/utils.js';\nimport bippath from 'bip32-path';\nimport semver from 'semver';\nimport { getErrorMessage } from './error';\nimport * as guards from './guards';\n\n/**\n * IOTA API\n * @module hw-app-iota\n */\n\nconst CLA = 0x7a;\nconst Commands = {\n  // specific timeouts:\n  INS_SET_SEED: 0x01, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_PUBKEY: 0x02, // TIMEOUT_CMD_PUBKEY\n  INS_TX: 0x03, // TIMEOUT_CMD_NON_USER_INTERACTION => TIMEOUT_CMD_USER_INTERACTION (IF cur_idx == lst_idx)\n  INS_SIGN: 0x04, // TIMEOUT_CMD_PUBKEY\n  INS_GET_APP_CONFIG: 0x10, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_RESET: 0xff, // TIMEOUT_CMD_NON_USER_INTERACTION\n};\nconst TIMEOUT_CMD_PUBKEY = 10000;\nconst TIMEOUT_CMD_NON_USER_INTERACTION = 10000;\nconst TIMEOUT_CMD_USER_INTERACTION = 150000;\n\nconst LEGACY_VERSION_RANGE = '<0.5';\nconst DEFAULT_SECURITY = 2;\nconst HASH_LENGTH = 81;\nconst TAG_LENGTH = 27;\nconst SIGNATURE_FRAGMENT_SLICE_LENGTH = 3 * HASH_LENGTH;\nconst EMPTY_TAG = '9'.repeat(TAG_LENGTH);\n\n/**\n * Class for the interaction with the Ledger IOTA application.\n *\n * @example\n * import Iota from \"hw-app-iota\";\n * const iota = new Iota(transport);\n */\nclass Iota {\n  constructor(transport) {\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        'setActiveSeed',\n        'getAddress',\n        'prepareTransfers',\n        'getAppVersion',\n        'getAppMaxBundleSize',\n        'signBundle'\n      ],\n      'IOT'\n    );\n\n    this.transport = transport;\n    this.config = undefined;\n    this.security = 0;\n    this.pathArray = undefined;\n  }\n\n  /**\n   * Prepares the IOTA seed to be used for subsequent calls.\n   *\n   * @param {String} path - String representation of the BIP32 path. At most 5 levels.\n   * @param {Integer} [security=2] - IOTA security level to use\n   * @example\n   * iota.setActiveSeed(\"44'/4218'/0'/0'\", 2);\n   **/\n  async setActiveSeed(path, security = DEFAULT_SECURITY) {\n    guards.string(path);\n    guards.security(security);\n\n    this.pathArray = Iota._validatePath(path);\n    this.security = security;\n\n    // query the app config, if not present\n    this.config = this.config ? this.config : await this._getAppConfig();\n\n    if (semver.satisfies(this.config.app_version, LEGACY_VERSION_RANGE)) {\n      // use legacy structs\n      this._createPubkeyInput = this._createPubkeyInputLegacy;\n      this._createTxInput = this._createTxInputLegacy;\n\n      await this._setSeed();\n    } else {\n      // reset the state on the Ledger\n      await this._reset(true);\n    }\n  }\n\n  /**\n   * Generates an address index-based.\n   * The result depends on the initalized seed and security level.\n   *\n   * @param {Integer} index - Index of the address\n   * @param {Object} [options]\n   * @param {Boolean} [options.checksum=false] - Append 9 tryte checksum\n   * @param {Boolean} [options.display=false] - Display generated address on display\n   * @returns {Promise<String>} Tryte-encoded address\n   * @example\n   * iota.getAddress(0, { checksum: true });\n   **/\n  async getAddress(index, options = {}) {\n    this._assertInitialized();\n    guards.index(index);\n\n    const checksum = options.checksum || false;\n    const display = options.display || false;\n\n    const address = await this._publicKey(index, display);\n    if (checksum) {\n      return addChecksum(address);\n    }\n    return address;\n  }\n\n  /**\n   * Prepares the array of raw transaction data (trytes) by generating a bundle and signing the inputs.\n   *\n   * @param {Object[]} transfers - Transfer objects\n   * @param {String} transfers[].address - Tryte-encoded address of recipient, with or without the 9 tryte checksum\n   * @param {Integer} transfers[].value - Value to be transferred\n   * @param {String} transfers[].tag - Tryte-encoded tag. Maximum value is 27 trytes.\n   * @param {Object[]} inputs - Inputs used for funding the transfer\n   * @param {String} inputs[].address - Tryte-encoded source address, with or without the 9 tryte checksum\n   * @param {Integer} inputs[].balance - Balance of that input\n   * @param {String} inputs[].keyIndex - Index of the address\n   * @param {Object} [remainder] - Destination for sending the remainder value (of the inputs) to.\n   * @param {String} remainder.address - Tryte-encoded address, with or without the 9 tryte checksum\n   * @param {Integer} remainder.keyIndex - Index of the address\n   * @param {Function} [now = Date.now()] - Function to get the milliseconds since the UNIX epoch for timestamps.\n   * @returns {Promise<String[]>} Transaction trytes of 2673 trytes per transaction\n   */\n  async prepareTransfers(transfers, inputs, remainder, now = () => Date.now()) {\n    this._assertInitialized();\n    guards.transfers(transfers);\n    guards.inputs(inputs);\n    guards.remainder(remainder);\n    guards.nullaryFunc(now);\n\n    if (transfers.length != 1) {\n      throw new Error('unsupported number of transfers');\n    }\n\n    remainder = Iota._validateRemainder(transfers, inputs, remainder);\n    const trytes = await this._prepareTransfers(\n      transfers,\n      inputs,\n      remainder,\n      now\n    );\n    // reset the bundle\n    await this._reset(true);\n\n    return trytes;\n  }\n\n  /**\n   * Prepares the array of raw transaction data (trytes) by signing the inputs of the provided bundle.\n   * \n   * @param {Bundle} bundle - Bundle to be signed\n   * @param {Object.<string, int>} addressKeyIndices - Indices of each input address\n   * @returns {Promise<String[]>} Transaction trytes of 2673 trytes per transaction\n   */\n  async signBundle(bundle, addressKeyIndices) {\n    // assure that the bundle is really finalized\n    bundle.finalize()\n\n    const inputs = bundle.bundle.filter(tx => tx.value < 0)\n    inputs.forEach((tx) => {\n      if (!(tx.address in addressKeyIndices)) {\n        throw new Error('\"addressKeyIndices\" invalid: missing ' + tx.address)\n      }\n    })\n\n    try {\n      await this._signBundle(bundle, addressKeyIndices);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error)\n    }\n\n    // compute and return the corresponding trytes\n    const bundleTrytes = [];\n    bundle.bundle.forEach((tx) => bundleTrytes.push(transactionTrytes(tx)));\n    return bundleTrytes.reverse();\n  }\n\n  /**\n   * Retrieves version information about the installed application from the device.\n   *\n   * @returns {Promise<String>} Semantic Version string (i.e. MAJOR.MINOR.PATCH)\n   **/\n  async getAppVersion() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    return config.app_version;\n  }\n\n  /**\n   * Retrieves the largest supported number of transactions (including meta transactions)\n   * in one transfer bundle from the device.\n   *\n   * @returns {Promise<Integer>} Maximum bundle size\n   **/\n  async getAppMaxBundleSize() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    // return value from config or default 8\n    return config.app_max_bundle_size ? config.app_max_bundle_size : 8;\n  }\n\n  ///////// Private methods should not be called directly! /////////\n\n  static _validatePath(path) {\n    let pathArray;\n    try {\n      pathArray = bippath.fromString(path).toPathArray();\n    } catch (e) {\n      throw new Error('\"path\" invalid: ' + e.message);\n    }\n\n    if (!pathArray || pathArray.length < 2 || pathArray.length > 5) {\n      throw new Error('\"path\" invalid: ' + 'Invalid path length');\n    }\n\n    return pathArray;\n  }\n\n  _assertInitialized() {\n    if (!this.security) {\n      throw new Error('seed not yet initialized');\n    }\n  }\n\n  _addSeedFields(struct) {\n    return struct\n      .word8('security')\n      .word32Ule('pathLength')\n      .array('pathArray', this.pathArray.length, 'word32Ule');\n  }\n\n  _initSeedFields(struct) {\n    const fields = struct.fields;\n    fields.security = this.security;\n    fields.pathLength = this.pathArray.length;\n    fields.pathArray = this.pathArray;\n  }\n\n  async _setSeed() {\n    const setSeedInStruct = new Struct();\n    this._addSeedFields(setSeedInStruct);\n\n    setSeedInStruct.allocate();\n    this._initSeedFields(setSeedInStruct);\n\n    await this._sendCommand(\n      Commands.INS_SET_SEED,\n      0,\n      0,\n      setSeedInStruct.buffer(),\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  _createPubkeyInputLegacy(index) {\n    let struct = new Struct();\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  _createPubkeyInput(index) {\n    let struct = new Struct();\n    this._addSeedFields(struct);\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    this._initSeedFields(struct);\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  async _publicKey(index, display) {\n    const pubkeyInStruct = this._createPubkeyInput(index);\n\n    const response = await this._sendCommand(\n      Commands.INS_PUBKEY,\n      display ? 0x01 : 0x00,\n      0,\n      pubkeyInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const pubkeyOutStruct = new Struct().chars('address', HASH_LENGTH);\n    pubkeyOutStruct.setBuffer(response);\n\n    return pubkeyOutStruct.fields.address;\n  }\n\n  static _validateRemainder(transfers, inputs, remainder) {\n    const balance = inputs.reduce((a, i) => a + i.balance, 0);\n    const payment = transfers.reduce((a, t) => a + t.value, 0);\n\n    if (balance < payment) {\n      throw new Error('insufficient balance');\n    } else if (balance > payment) {\n      if (!remainder) {\n        throw new Error('\"remainder\" is required');\n      }\n      return {\n        address: remainder.address,\n        value: balance - payment,\n        keyIndex: remainder.keyIndex,\n      };\n    }\n\n    // ignore the remainder, if there is no change\n    return undefined;\n  }\n\n  async _sign(index, sliceLength) {\n    const signInStruct = new Struct().word32Ule('index');\n\n    signInStruct.allocate();\n    signInStruct.fields.index = index;\n\n    const response = await this._sendCommand(\n      Commands.INS_SIGN,\n      0,\n      0,\n      signInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const signOutStruct = new Struct()\n      .chars('signature', sliceLength)\n      .word8Sle('fragmentsRemaining');\n    signOutStruct.setBuffer(response);\n\n    return {\n      signature: signOutStruct.fields.signature,\n      fragmentsRemaining: signOutStruct.fields.fragmentsRemaining,\n    };\n  }\n\n  _createTxInputLegacy(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  _createTxInput(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    if (tx_idx == 0) {\n      this._addSeedFields(struct);\n    }\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    if (tx_idx == 0) {\n      this._initSeedFields(struct);\n    }\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  async _transaction(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    const txInStruct = this._createTxInput(\n      address,\n      address_idx,\n      value,\n      tag,\n      tx_idx,\n      tx_len,\n      time\n    );\n\n    let timeout = TIMEOUT_CMD_NON_USER_INTERACTION;\n    if (tx_idx == tx_len) {\n      timeout = TIMEOUT_CMD_USER_INTERACTION;\n    }\n\n    const response = await this._sendCommand(\n      Commands.INS_TX,\n      tx_idx == 0 ? 0x00 : 0x80,\n      0,\n      txInStruct.buffer(),\n      timeout\n    );\n\n    const txOutStruct = new Struct()\n      .word8('finalized')\n      .chars('bundleHash', HASH_LENGTH);\n    txOutStruct.setBuffer(response);\n\n    return {\n      finalized: txOutStruct.fields.finalized,\n      bundleHash: txOutStruct.fields.bundleHash,\n    };\n  }\n\n  async _getSignatureFragments(index, sliceLength) {\n    const numSlices = (this.security * 2187) / sliceLength;\n\n    let signature = '';\n    for (let i = 1; i <= numSlices; i++) {\n      const result = await this._sign(index, sliceLength);\n      signature += result.signature;\n\n      // the remaining fragments must match the num slices\n      if ((i === numSlices) != (result.fragmentsRemaining === 0)) {\n        throw new Error('wrong signture length');\n      }\n    }\n\n    // split into segments of exactly 2187 chars\n    return signature.match(/.{2187}/g);\n  }\n\n  async _addSignatureFragmentsToBundle(bundle) {\n    for (let i = 0; i < bundle.bundle.length; i++) {\n      const tx = bundle.bundle[i];\n\n      // only sign inputs\n      if (tx.value >= 0) {\n        continue;\n      }\n\n      // compute all the signature fragments for that input transaction\n      const signatureFragments = await this._getSignatureFragments(\n        i,\n        SIGNATURE_FRAGMENT_SLICE_LENGTH\n      );\n      // and set the first fragment\n      tx.signatureMessageFragment = signatureFragments.shift();\n\n      // set the signature fragments for all successive meta transactions\n      const address = tx.address;\n      for (let j = 1; j < this.security; j++) {\n        if (++i >= bundle.bundle.length) {\n          return;\n        }\n\n        const tx = bundle.bundle[i];\n        if (tx.address === address && tx.value === 0) {\n          tx.signatureMessageFragment = signatureFragments.shift();\n        }\n      }\n    }\n  }\n\n  async _signBundle(bundle, addressKeyIndices) {\n    let finalized = false;\n    let bundleHash = '';\n    for (const tx of bundle.bundle) {\n      const keyIndex = addressKeyIndices[tx.address]\n        ? addressKeyIndices[tx.address]\n        : 0;\n      const result = await this._transaction(\n        tx.address,\n        keyIndex,\n        tx.value,\n        tx.obsoleteTag,\n        tx.currentIndex,\n        tx.lastIndex,\n        tx.timestamp\n      );\n      finalized = result.finalized;\n      bundleHash = result.bundleHash;\n    }\n\n    if (!finalized) {\n      throw new Error('bundle not finalized');\n    }\n    if (bundleHash !== bundle.bundle[0].bundle) {\n      throw new Error('wrong bundle hash');\n    }\n\n    await this._addSignatureFragmentsToBundle(bundle);\n  }\n\n  _hasDuplicateAddresses(transfers, inputs, remainder) {\n    const set = new Set();\n    transfers.forEach((t) => set.add(t.address));\n    inputs.forEach((i) => set.add(i.address));\n    if (remainder && set.has(remainder.address)) {\n      return true;\n    }\n\n    return set.length === transfers.length + inputs.length;\n  }\n\n  async _prepareTransfers(transfers, inputs, remainder, now) {\n    transfers = transfers.map((t) => ({\n      ...t,\n      // remove checksum\n      address: noChecksum(t.address),\n      // pad tag\n      tag: t.tag ? t.tag.padEnd(TAG_LENGTH, '9') : EMPTY_TAG,\n    }));\n    inputs = inputs.map((i) => ({\n      ...i,\n      // remove checksum\n      address: noChecksum(i.address),\n      // set correct security level\n      security: this.security,\n    }));\n    if (remainder) {\n      // remove checksum\n      remainder = { ...remainder, address: noChecksum(remainder.address) };\n    }\n\n    if (this._hasDuplicateAddresses(transfers, inputs, remainder)) {\n      throw new Error('transaction must not contain duplicate addresses');\n    }\n\n    // use the current time\n    const timestamp = Math.floor(now() / 1000);\n    let bundle = new Bundle();\n\n    transfers.forEach((t) =>\n      bundle.addEntry(1, t.address, t.value, t.tag, timestamp, -1)\n    );\n    inputs.forEach((i) =>\n      bundle.addEntry(\n        i.security,\n        i.address,\n        -i.balance,\n        EMPTY_TAG,\n        timestamp,\n        i.keyIndex\n      )\n    );\n    if (remainder) {\n      bundle.addEntry(\n        1,\n        remainder.address,\n        remainder.value,\n        EMPTY_TAG,\n        timestamp,\n        remainder.keyIndex\n      );\n    }\n    bundle.addTrytes([]);\n    bundle.finalize();\n\n    // map internal addresses to their index\n    const addressKeyIndices = {};\n    inputs.forEach((i) => (addressKeyIndices[i.address] = i.keyIndex));\n    if (remainder) {\n      addressKeyIndices[remainder.address] = remainder.keyIndex;\n    }\n\n    // sign the bundle on the ledger\n    await this._signBundle(bundle, addressKeyIndices);\n\n    // compute and return the corresponding trytes\n    const bundleTrytes = [];\n    bundle.bundle.forEach((tx) => bundleTrytes.push(transactionTrytes(tx)));\n    return bundleTrytes.reverse();\n  }\n\n  _createAppConfigOutputLegacy() {\n    const struct = new Struct()\n      .word8('app_flags')\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch');\n\n    return struct;\n  }\n\n  _createAppConfigOutput() {\n    const struct = new Struct()\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch')\n      .word8('app_max_bundle_size')\n      .word8('app_flags');\n\n    return struct;\n  }\n\n  async _getAppConfig() {\n    const response = await this._sendCommand(\n      Commands.INS_GET_APP_CONFIG,\n      0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n\n    let getAppConfigOutStruct = this._createAppConfigOutput();\n    // check whether the response matches the struct plus 2 bytes status code\n    if (response.length < getAppConfigOutStruct.length() + 2) {\n      getAppConfigOutStruct = this._createAppConfigOutputLegacy();\n    }\n    getAppConfigOutStruct.setBuffer(response);\n\n    const fields = getAppConfigOutStruct.fields;\n    return {\n      app_max_bundle_size: fields.app_max_bundle_size,\n      app_flags: fields.app_flags,\n      app_version:\n        fields.app_version_major +\n        '.' +\n        fields.app_version_minor +\n        '.' +\n        fields.app_version_patch,\n    };\n  }\n\n  async _reset(partial = false) {\n    await this._sendCommand(\n      Commands.INS_RESET,\n      partial ? 1 : 0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  async _sendCommand(ins, p1, p2, data, timeout) {\n    const transport = this.transport;\n    try {\n      transport.setExchangeTimeout(timeout);\n      return await transport.send(CLA, ins, p1, p2, data);\n    } catch (error) {\n      // update the message, if status code is present\n      if (error.statusCode) {\n        error.message = getErrorMessage(error.statusCode) || error.message;\n      }\n      throw error;\n    }\n  }\n}\n\nexport default Iota;\n","function getStatusMessage(statusCode) {\n  switch (statusCode) {\n    // improve text of most common errors\n    case 0x9000: // SW_OK\n      return 'Success';\n    case 0x6700: // SW_INCORRECT_LENGTH\n      return 'Incorrect input length';\n    case 0x6a80: // SW_COMMAND_INVALID_DATA\n      return 'Incorrect data';\n    case 0x6b00: // SW_INCORRECT_P1P2\n      return 'Incorrect command parameter';\n    case 0x6c00: // SW_INCORRECT_LENGTH_P3\n      return 'Incorrect length specified in header';\n    case 0x6d00: // SW_INS_NOT_SUPPORTED\n      return 'Invalid INS command';\n    case 0x6e00: // SW_CLA_NOT_SUPPORTED\n      return 'Incorrect CLA (Wrong application opened)';\n    case 0x6900: // SW_COMMAND_NOT_ALLOWED\n      return 'Command not allowed (Command out of order)';\n    case 0x6982: // SW_SECURITY_STATUS_NOT_SATISFIED\n      return 'Security not satisfied (Device locked)';\n    case 0x6985: // SW_CONDITIONS_OF_USE_NOT_SATISFIED\n      return 'Condition of use not satisfied (Denied by the user)';\n    case 0x6401: // SW_COMMAND_TIMEOUT\n      return 'Security not satisfied (Timeout exceeded)';\n    case 0x69a1: // SW_BUNDLE_ERROR + INSECURE HASH\n      return 'Bundle error (Insecure hash)';\n    case 0x69a2: // SW_BUNDLE_ERROR + NON-ZERO BALANCE\n      return 'Bundle error (Non zero balance)';\n    case 0x69a3: // SW_BUNDLE_ERROR + INVALID META TX\n      return 'Bundle error (Invalid meta transaction)';\n    case 0x69a4: // SW_BUNDLE_ERROR + INVALID ADDRESS INDEX\n      return 'Bundle error (Invalid input address/index pair(s))';\n    case 0x69a5: // SW_BUNDLE_ERROR + ADDRESS REUSED\n      return 'Bundle error (Address reused)';\n\n    // Legacy exceptions\n    case 0x6984: // SW_COMMAND_INVALID_DATA\n      return 'Invalid input data';\n    case 0x6986: // SW_APP_NOT_INITIALIZED\n      return 'App has not been initialized by user';\n    case 0x6991: // SW_TX_INVALID_INDEX\n      return 'Invalid transaction index';\n    case 0x6992: // SW_TX_INVALID_ORDER\n      return 'Invalid transaction order (Output, Inputs, Change)';\n    case 0x6993: // SW_TX_INVALID_META\n      return 'Invalid meta transaction';\n    case 0x6994: // SW_TX_INVALID_OUTPUT\n      return 'Invalid output transaction (Output must come first)';\n  }\n\n  // unexpected exception thrown\n  if (0x6f00 <= statusCode && statusCode <= 0x6fff) {\n    return 'Internal error, please report';\n  }\n}\n\n/**\n * Provides meaningful responses to error status codes returned by IOTA Ledger app.\n * @param {Integer} statusCode - Error statusCodecode\n * @returns {String} String message corresponding to error code\n */\nexport function getErrorMessage(statusCode) {\n  const smsg = getStatusMessage(statusCode);\n  if (smsg) {\n    const statusCodeStr = statusCode.toString(16);\n\n    // set the message according to the status code\n    return `Ledger device: ${smsg} (0x${statusCodeStr})`;\n  }\n}\n"],"names":["validInteger","Joi","number","integer","validSecurity","min","max","validIndex","validValue","validBalance","validTrytes","string","regex","validTag","allow","validAddress","alternatives","length","validTransfers","array","items","object","address","required","tag","value","unknown","validInputs","balance","keyIndex","validRemainder","_catch","body","recover","result","e","then","_settle","pact","state","s","_Pact","o","bind","v","observer","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","_for","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","Symbol","iterator","EMPTY_TAG","repeat","Iota","transport","decorateAppAPIMethods","config","undefined","security","pathArray","setActiveSeed","path","_this2","semver","satisfies","app_version","_createPubkeyInput","_createPubkeyInputLegacy","_createTxInput","_createTxInputLegacy","_setSeed","_reset","assert","_validatePath","_getAppConfig","getAddress","index","options","_assertInitialized","checksum","_publicKey","display","addChecksum","prepareTransfers","transfers","inputs","remainder","now","Date","_this6","optional","func","arity","Error","_validateRemainder","_prepareTransfers","trytes","signBundle","bundle","addressKeyIndices","bundleTrytes","forEach","tx","push","transactionTrytes","reverse","finalize","filter","_this8","_signBundle","error","console","getAppVersion","_this10","getAppMaxBundleSize","_this12","app_max_bundle_size","bippath","fromString","toPathArray","message","_addSeedFields","struct","word8","word32Ule","_initSeedFields","fields","pathLength","setSeedInStruct","Struct","_this14","allocate","_sendCommand","buffer","pubkeyInStruct","response","pubkeyOutStruct","chars","setBuffer","reduce","a","i","payment","t","_sign","sliceLength","signInStruct","signOutStruct","word8Sle","signature","fragmentsRemaining","address_idx","tx_idx","tx_len","time","word64Sle","_transaction","txInStruct","timeout","txOutStruct","finalized","bundleHash","_getSignatureFragments","match","numSlices","_this22","_addSignatureFragmentsToBundle","_this24","signatureFragments","signatureMessageFragment","shift","j","_this26","target","check","_iteratorSymbol","step","_cycle","next","done","_fixup","TypeError","values","_forTo","obsoleteTag","currentIndex","lastIndex","timestamp","_hasDuplicateAddresses","set","Set","add","has","map","noChecksum","padEnd","_this28","Math","floor","Bundle","addEntry","addTrytes","_createAppConfigOutputLegacy","_createAppConfigOutput","_this30","getAppConfigOutStruct","app_flags","app_version_major","app_version_minor","app_version_patch","partial","ins","p1","p2","data","setExchangeTimeout","send","statusCode","smsg","getStatusMessage","toString","getErrorMessage"],"mappings":"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"}